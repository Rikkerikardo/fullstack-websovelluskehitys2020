{"ast":null,"code":"import loginService from \"../services/login\";\nimport blogService from \"../services/blogs\";\nimport { setNotification } from \"../reducers/notificationReducer\";\nconst initialState = {\n  username: localStorage.getItem(\"user\"),\n  isLoggedIn: localStorage.getItem(\"isLoggedIn\"),\n  token: localStorage.getItem(\"token\")\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"LOGGED_USER\":\n      return { ...state,\n        username: action.data.username,\n        isLoggedIn: true\n      };\n\n    case \"LOG_OUT\":\n      return initialState;\n\n    default:\n      return state;\n  }\n};\n\nexport const login = credentials => {\n  return async dispatch => {\n    try {\n      const user = await loginService.login(credentials);\n      await blogService.setToken(user.token);\n      localStorage.setItem(\"user\", user.username);\n      localStorage.setItem(\"isLoggedIn\", true);\n      dispatch({\n        type: \"LOGGED_USER\",\n        data: user\n      });\n    } catch (exception) {\n      dispatch(setNotification(\"wrong credentials\"));\n    }\n  };\n};\nexport const logOut = () => {\n  return async dispatch => {\n    localStorage.clear();\n    dispatch({\n      type: \"LOG_OUT\"\n    });\n  };\n};\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Koulu/Desktop/Fullstack/fullstack-websovelluskehitys2020/osa7/bloglist-frontend/src/reducers/loggedUserReducer.js"],"names":["loginService","blogService","setNotification","initialState","username","localStorage","getItem","isLoggedIn","token","reducer","state","action","type","data","login","credentials","dispatch","user","setToken","setItem","exception","logOut","clear"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,mBAAzB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,SAASC,eAAT,QAAgC,iCAAhC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAEC,YAAY,CAACC,OAAb,CAAqB,MAArB,CADS;AAEnBC,EAAAA,UAAU,EAAEF,YAAY,CAACC,OAAb,CAAqB,YAArB,CAFO;AAGnBE,EAAAA,KAAK,EAAEH,YAAY,CAACC,OAAb,CAAqB,OAArB;AAHY,CAArB;;AAMA,MAAMG,OAAO,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,aAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELN,QAAAA,QAAQ,EAAEO,MAAM,CAACE,IAAP,CAAYT,QAFjB;AAGLG,QAAAA,UAAU,EAAE;AAHP,OAAP;;AAKF,SAAK,SAAL;AACE,aAAOJ,YAAP;;AACF;AACE,aAAOO,KAAP;AAVJ;AAYD,CAbD;;AAeA,OAAO,MAAMI,KAAK,GAAIC,WAAD,IAAiB;AACpC,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACF,YAAMC,IAAI,GAAG,MAAMjB,YAAY,CAACc,KAAb,CAAmBC,WAAnB,CAAnB;AACA,YAAMd,WAAW,CAACiB,QAAZ,CAAqBD,IAAI,CAACT,KAA1B,CAAN;AACAH,MAAAA,YAAY,CAACc,OAAb,CAAqB,MAArB,EAA6BF,IAAI,CAACb,QAAlC;AACAC,MAAAA,YAAY,CAACc,OAAb,CAAqB,YAArB,EAAmC,IAAnC;AACAH,MAAAA,QAAQ,CAAC;AACPJ,QAAAA,IAAI,EAAE,aADC;AAEPC,QAAAA,IAAI,EAAEI;AAFC,OAAD,CAAR;AAID,KATD,CASE,OAAOG,SAAP,EAAkB;AAClBJ,MAAAA,QAAQ,CAACd,eAAe,CAAC,mBAAD,CAAhB,CAAR;AACD;AACF,GAbD;AAcD,CAfM;AAiBP,OAAO,MAAMmB,MAAM,GAAG,MAAM;AAC1B,SAAO,MAAOL,QAAP,IAAoB;AACzBX,IAAAA,YAAY,CAACiB,KAAb;AACAN,IAAAA,QAAQ,CAAC;AACPJ,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAGD,GALD;AAMD,CAPM;AASP,eAAeH,OAAf","sourcesContent":["import loginService from \"../services/login\"\r\nimport blogService from \"../services/blogs\"\r\nimport { setNotification } from \"../reducers/notificationReducer\"\r\n\r\nconst initialState = {\r\n  username: localStorage.getItem(\"user\"),\r\n  isLoggedIn: localStorage.getItem(\"isLoggedIn\"),\r\n  token: localStorage.getItem(\"token\")\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"LOGGED_USER\":\r\n      return {\r\n        ...state,\r\n        username: action.data.username,\r\n        isLoggedIn: true\r\n      }\r\n    case \"LOG_OUT\":\r\n      return initialState\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const login = (credentials) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const user = await loginService.login(credentials)\r\n      await blogService.setToken(user.token)\r\n      localStorage.setItem(\"user\", user.username)\r\n      localStorage.setItem(\"isLoggedIn\", true)\r\n      dispatch({\r\n        type: \"LOGGED_USER\",\r\n        data: user\r\n      })\r\n    } catch (exception) {\r\n      dispatch(setNotification(\"wrong credentials\"))\r\n    }\r\n  }\r\n}\r\n\r\nexport const logOut = () => {\r\n  return async (dispatch) => {\r\n    localStorage.clear()\r\n    dispatch({\r\n      type: \"LOG_OUT\"\r\n    })\r\n  }\r\n}\r\n\r\nexport default reducer\r\n"]},"metadata":{},"sourceType":"module"}