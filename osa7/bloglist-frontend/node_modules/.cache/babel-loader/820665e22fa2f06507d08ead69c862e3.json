{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Koulu\\\\Desktop\\\\Fullstack\\\\fullstack-websovelluskehitys2020\\\\osa7\\\\bloglist-frontend\\\\src\\\\components\\\\Togglable.js\";\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"react-bootstrap\";\nconst Togglable = React.forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false);\n  const hideWhenVisible = {\n    display: visible ? \"none\" : \"\"\n  };\n  const showWhenVisible = {\n    display: visible ? \"\" : \"none\"\n  };\n\n  const toggleVisibility = () => {\n    setVisible(!visible);\n  };\n\n  Togglable.propTypes = {\n    buttonLabel: PropTypes.string.isRequired\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: hideWhenVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"info\",\n    onClick: toggleVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, props.buttonLabel)), React.createElement(\"div\", {\n    style: showWhenVisible,\n    className: \"togglableContent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, props.children, React.createElement(Button, {\n    className: \"my-3\",\n    variant: \"dark\",\n    onClick: toggleVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"cancel\")));\n});\nexport default Togglable;","map":{"version":3,"sources":["C:/Users/Koulu/Desktop/Fullstack/fullstack-websovelluskehitys2020/osa7/bloglist-frontend/src/components/Togglable.js"],"names":["React","useState","PropTypes","Button","Togglable","forwardRef","props","ref","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","propTypes","buttonLabel","string","isRequired","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,MAAMC,SAAS,GAAGJ,KAAK,CAACK,UAAN,CAAiB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACjD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAMS,eAAe,GAAG;AAAEC,IAAAA,OAAO,EAAEH,OAAO,GAAG,MAAH,GAAY;AAA9B,GAAxB;AACA,QAAMI,eAAe,GAAG;AAAED,IAAAA,OAAO,EAAEH,OAAO,GAAG,EAAH,GAAQ;AAA1B,GAAxB;;AAEA,QAAMK,gBAAgB,GAAG,MAAM;AAC7BJ,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAFD;;AAIAJ,EAAAA,SAAS,CAACU,SAAV,GAAsB;AACpBC,IAAAA,WAAW,EAAEb,SAAS,CAACc,MAAV,CAAiBC;AADV,GAAtB;AAIA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,KAAK,EAAEP,eAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,MAAhB;AAAuB,IAAA,OAAO,EAAEG,gBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,KAAK,CAACS,WADT,CADF,CADF,EAME;AAAK,IAAA,KAAK,EAAEH,eAAZ;AAA6B,IAAA,SAAS,EAAC,kBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,KAAK,CAACY,QADT,EAEE,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,MAAlB;AAAyB,IAAA,OAAO,EAAC,MAAjC;AAAwC,IAAA,OAAO,EAAEL,gBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CANF,CADF;AAeD,CA7BiB,CAAlB;AA8BA,eAAeT,SAAf","sourcesContent":["import React, { useState } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Button } from \"react-bootstrap\"\r\n\r\nconst Togglable = React.forwardRef((props, ref) => {\r\n  const [visible, setVisible] = useState(false)\r\n\r\n  const hideWhenVisible = { display: visible ? \"none\" : \"\" }\r\n  const showWhenVisible = { display: visible ? \"\" : \"none\" }\r\n\r\n  const toggleVisibility = () => {\r\n    setVisible(!visible)\r\n  }\r\n\r\n  Togglable.propTypes = {\r\n    buttonLabel: PropTypes.string.isRequired\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div style={hideWhenVisible}>\r\n        <Button variant=\"info\" onClick={toggleVisibility}>\r\n          {props.buttonLabel}\r\n        </Button>\r\n      </div>\r\n      <div style={showWhenVisible} className=\"togglableContent\">\r\n        {props.children}\r\n        <Button className=\"my-3\" variant=\"dark\" onClick={toggleVisibility}>\r\n          cancel\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\nexport default Togglable\r\n"]},"metadata":{},"sourceType":"module"}