{"ast":null,"code":"import blogService from \"../services/blogs\";\n\nconst reducer = (state = [], action) => {\n  switch (action.type) {\n    case \"INIT_BLOGS\":\n      return action.data;\n\n    case \"NEW_BLOG\":\n      return [...state, action.content];\n\n    case \"LIKE_BLOG\":\n      const id = action.data.updatedBlog.id;\n      const blogToChange = state.find(a => a.id === id);\n      const changedBlog = { ...blogToChange,\n        likes: blogToChange.likes + 1\n      };\n      return state.map(blog => blog.id !== id ? blog : changedBlog);\n\n    case \"DELETE_BLOG\":\n      return action.data;\n\n    case \"SET_TOKEN\":\n      return action.data;\n\n    default:\n      return state;\n  }\n};\n\nexport const setToken = token => {\n  return async dispatch => {\n    await blogService.setToken(token);\n    dispatch({\n      type: \"SET_TOKEN\",\n      data: token\n    });\n  };\n};\nexport const remove = blog => {\n  return async dispatch => {\n    const remainingBlogs = await blogService.remove(blog.id);\n    dispatch({\n      type: \"DELETE_BLOG\",\n      data: remainingBlogs\n    });\n  };\n};\nexport const addLike = blog => {\n  return async dispatch => {\n    const updatedBlog = await blogService.addLike(blog);\n    dispatch({\n      type: \"LIKE_BLOG\",\n      data: {\n        updatedBlog\n      }\n    });\n  };\n};\nexport const newBlog = content => {\n  return async dispatch => {\n    const newBlog = await blogService.create(content);\n    dispatch({\n      type: \"NEW_BLOG\",\n      content: newBlog\n    });\n  };\n};\nexport const initializeBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll();\n    dispatch({\n      type: \"INIT_BLOGS\",\n      data: blogs\n    });\n  };\n};\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Koulu/Desktop/Fullstack/fullstack-websovelluskehitys2020/osa7/bloglist-frontend/src/reducers/blogReducer.js"],"names":["blogService","reducer","state","action","type","data","content","id","updatedBlog","blogToChange","find","a","changedBlog","likes","map","blog","setToken","token","dispatch","remove","remainingBlogs","addLike","newBlog","create","initializeBlogs","blogs","getAll"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,mBAAxB;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,YAAL;AACE,aAAOD,MAAM,CAACE,IAAd;;AACF,SAAK,UAAL;AACE,aAAO,CAAC,GAAGH,KAAJ,EAAWC,MAAM,CAACG,OAAlB,CAAP;;AACF,SAAK,WAAL;AACE,YAAMC,EAAE,GAAGJ,MAAM,CAACE,IAAP,CAAYG,WAAZ,CAAwBD,EAAnC;AACA,YAAME,YAAY,GAAGP,KAAK,CAACQ,IAAN,CAAYC,CAAD,IAAOA,CAAC,CAACJ,EAAF,KAASA,EAA3B,CAArB;AACA,YAAMK,WAAW,GAAG,EAClB,GAAGH,YADe;AAElBI,QAAAA,KAAK,EAAEJ,YAAY,CAACI,KAAb,GAAqB;AAFV,OAApB;AAIA,aAAOX,KAAK,CAACY,GAAN,CAAWC,IAAD,IAAWA,IAAI,CAACR,EAAL,KAAYA,EAAZ,GAAiBQ,IAAjB,GAAwBH,WAA7C,CAAP;;AACF,SAAK,aAAL;AACE,aAAOT,MAAM,CAACE,IAAd;;AACF,SAAK,WAAL;AACE,aAAOF,MAAM,CAACE,IAAd;;AACF;AACE,aAAOH,KAAP;AAlBJ;AAoBD,CArBD;;AAuBA,OAAO,MAAMc,QAAQ,GAAIC,KAAD,IAAW;AACjC,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMlB,WAAW,CAACgB,QAAZ,CAAqBC,KAArB,CAAN;AACAC,IAAAA,QAAQ,CAAC;AACPd,MAAAA,IAAI,EAAE,WADC;AAEPC,MAAAA,IAAI,EAAEY;AAFC,KAAD,CAAR;AAID,GAND;AAOD,CARM;AAUP,OAAO,MAAME,MAAM,GAAIJ,IAAD,IAAU;AAC9B,SAAO,MAAOG,QAAP,IAAoB;AACzB,UAAME,cAAc,GAAG,MAAMpB,WAAW,CAACmB,MAAZ,CAAmBJ,IAAI,CAACR,EAAxB,CAA7B;AACAW,IAAAA,QAAQ,CAAC;AACPd,MAAAA,IAAI,EAAE,aADC;AAEPC,MAAAA,IAAI,EAAEe;AAFC,KAAD,CAAR;AAID,GAND;AAOD,CARM;AAUP,OAAO,MAAMC,OAAO,GAAIN,IAAD,IAAU;AAC/B,SAAO,MAAOG,QAAP,IAAoB;AACzB,UAAMV,WAAW,GAAG,MAAMR,WAAW,CAACqB,OAAZ,CAAoBN,IAApB,CAA1B;AACAG,IAAAA,QAAQ,CAAC;AACPd,MAAAA,IAAI,EAAE,WADC;AAEPC,MAAAA,IAAI,EAAE;AAAEG,QAAAA;AAAF;AAFC,KAAD,CAAR;AAID,GAND;AAOD,CARM;AAUP,OAAO,MAAMc,OAAO,GAAIhB,OAAD,IAAa;AAClC,SAAO,MAAOY,QAAP,IAAoB;AACzB,UAAMI,OAAO,GAAG,MAAMtB,WAAW,CAACuB,MAAZ,CAAmBjB,OAAnB,CAAtB;AACAY,IAAAA,QAAQ,CAAC;AACPd,MAAAA,IAAI,EAAE,UADC;AAEPE,MAAAA,OAAO,EAAEgB;AAFF,KAAD,CAAR;AAID,GAND;AAOD,CARM;AAUP,OAAO,MAAME,eAAe,GAAG,MAAM;AACnC,SAAO,MAAON,QAAP,IAAoB;AACzB,UAAMO,KAAK,GAAG,MAAMzB,WAAW,CAAC0B,MAAZ,EAApB;AACAR,IAAAA,QAAQ,CAAC;AACPd,MAAAA,IAAI,EAAE,YADC;AAEPC,MAAAA,IAAI,EAAEoB;AAFC,KAAD,CAAR;AAID,GAND;AAOD,CARM;AAUP,eAAexB,OAAf","sourcesContent":["import blogService from \"../services/blogs\"\r\n\r\nconst reducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"INIT_BLOGS\":\r\n      return action.data\r\n    case \"NEW_BLOG\":\r\n      return [...state, action.content]\r\n    case \"LIKE_BLOG\":\r\n      const id = action.data.updatedBlog.id\r\n      const blogToChange = state.find((a) => a.id === id)\r\n      const changedBlog = {\r\n        ...blogToChange,\r\n        likes: blogToChange.likes + 1\r\n      }\r\n      return state.map((blog) => (blog.id !== id ? blog : changedBlog))\r\n    case \"DELETE_BLOG\":\r\n      return action.data\r\n    case \"SET_TOKEN\":\r\n      return action.data\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const setToken = (token) => {\r\n  return async (dispatch) => {\r\n    await blogService.setToken(token)\r\n    dispatch({\r\n      type: \"SET_TOKEN\",\r\n      data: token\r\n    })\r\n  }\r\n}\r\n\r\nexport const remove = (blog) => {\r\n  return async (dispatch) => {\r\n    const remainingBlogs = await blogService.remove(blog.id)\r\n    dispatch({\r\n      type: \"DELETE_BLOG\",\r\n      data: remainingBlogs\r\n    })\r\n  }\r\n}\r\n\r\nexport const addLike = (blog) => {\r\n  return async (dispatch) => {\r\n    const updatedBlog = await blogService.addLike(blog)\r\n    dispatch({\r\n      type: \"LIKE_BLOG\",\r\n      data: { updatedBlog }\r\n    })\r\n  }\r\n}\r\n\r\nexport const newBlog = (content) => {\r\n  return async (dispatch) => {\r\n    const newBlog = await blogService.create(content)\r\n    dispatch({\r\n      type: \"NEW_BLOG\",\r\n      content: newBlog\r\n    })\r\n  }\r\n}\r\n\r\nexport const initializeBlogs = () => {\r\n  return async (dispatch) => {\r\n    const blogs = await blogService.getAll()\r\n    dispatch({\r\n      type: \"INIT_BLOGS\",\r\n      data: blogs\r\n    })\r\n  }\r\n}\r\n\r\nexport default reducer\r\n"]},"metadata":{},"sourceType":"module"}