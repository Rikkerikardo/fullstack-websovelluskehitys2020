{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","getAll","axios","get","then","response","data","newObject","post","catch","error","console","log","id","delete","put","Notification","message","className","style","color","fontStyle","fontSize","background","borderStyle","borderRadius","padding","marginBottom","AddPerson","props","onSubmit","handleSubmit","value","newName","onChange","handleChange","handleChange2","type","Filter","event","PersonsToShow","persons","filter","handleClick","person","name","includes","map","key","toString","number","onClick","App","useState","setPersons","setNewName","newNumber","setNewNumber","showAll","setShowAll","setMessage","useEffect","personService","initialNotes","target","preventDefault","noteObject","length","window","confirm","originalPerson","find","p","changedPerson","returnedPerson","setTimeout","returnedNote","concat","remainingPersons","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.42ca6c46.chunk.js","sourcesContent":["import axios from \"axios\"\r\nconst baseUrl = \"/api/persons\"\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then((response) => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request\r\n    .then((response) => response.data)\r\n    .catch((error) => {\r\n      console.log(error.response.data)\r\n      return `${error.response.data}`\r\n    })\r\n}\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(baseUrl + \"/\" + id)\r\n  return request.then(getAll)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request\r\n    .then((response) => response.data)\r\n    .catch((error) => {\r\n      console.log(error.response.data)\r\n      return `${error.response.data}`\r\n    })\r\n}\r\n\r\nexport default { getAll, create, remove, update }\r\n","import React, { useState, useEffect } from \"react\"\r\nimport Note from \"./components/Note\"\r\nimport axios from \"axios\"\r\nimport personService from \"./services/persons\"\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([])\r\n  const [newName, setNewName] = useState(\"\")\r\n  const [newNumber, setNewNumber] = useState(\"\")\r\n  const [showAll, setShowAll] = useState(\"\")\r\n  const [message, setMessage] = useState()\r\n\r\n  useEffect(() => {\r\n    personService.getAll().then((initialNotes) => {\r\n      setPersons(initialNotes)\r\n    })\r\n  }, [])\r\n\r\n  const addPerson = (event) => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      name: newName,\r\n      number: newNumber,\r\n    }\r\n\r\n    if (persons.filter((person) => person.name === newName).length > 0) {\r\n      if (\r\n        window.confirm(\r\n          `${newName} is already added to phonebook, replace the old number with a new one?`\r\n        )\r\n      ) {\r\n        const originalPerson = persons.find((p) => p.name === newName)\r\n        const changedPerson = { ...originalPerson, number: newNumber }\r\n\r\n        personService\r\n          .update(originalPerson.id, changedPerson)\r\n          .then((returnedPerson) => {\r\n            setPersons(\r\n              persons.map((person) =>\r\n                person.id !== changedPerson.id ? person : returnedPerson\r\n              )\r\n            )\r\n            setMessage(`Successfully edited ${originalPerson.name} information`)\r\n          })\r\n          .catch((error) => {\r\n            setMessage(\r\n              `Information of ${originalPerson.name} has already been removed from server`\r\n            )\r\n            setTimeout(() => {\r\n              setMessage(null)\r\n            }, 5000)\r\n          })\r\n      }\r\n    } else {\r\n      personService.create(noteObject).then((returnedNote) => {\r\n        setPersons(persons.concat(returnedNote))\r\n        setNewName(\"\")\r\n        setNewNumber(\"\")\r\n        setMessage(`Added ${returnedNote.name}`)\r\n        setTimeout(() => {\r\n          setMessage(null)\r\n        }, 5000)\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleNameChange = (event) => {\r\n    console.log(event.target.value)\r\n    setNewName(event.target.value)\r\n  }\r\n\r\n  const handleNumberChange = (event) => {\r\n    console.log(event.target.value)\r\n    setNewNumber(event.target.value)\r\n  }\r\n\r\n  const handleFilter = (event) => {\r\n    console.log(event.target.value)\r\n    setShowAll(event.target.value)\r\n  }\r\n\r\n  const handleDelete = (person) => {\r\n    console.log(person)\r\n    if (window.confirm(`Delete ${person.name}?`)) {\r\n      personService.remove(person.id).then((remainingPersons) => {\r\n        setPersons(remainingPersons)\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification message={message} />\r\n\r\n      <Filter event={handleFilter} />\r\n\r\n      <AddPerson\r\n        handleSubmit={addPerson}\r\n        handleChange={handleNameChange}\r\n        value={newName}\r\n        handleChange2={handleNumberChange}\r\n      />\r\n\r\n      <h2>Numbers</h2>\r\n\r\n      <PersonsToShow\r\n        persons={persons}\r\n        filter={showAll}\r\n        handleClick={handleDelete}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Notification = ({ message }) => {\r\n  const notificationStyle = {\r\n    color: \"yellow\",\r\n    fontStyle: \"italic\",\r\n    fontSize: 16,\r\n    background: \"lightgrey\",\r\n    borderStyle: \"solid\",\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginBottom: 10,\r\n  }\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"notification\" style={notificationStyle}>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst AddPerson = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        name: <input value={props.newName} onChange={props.handleChange} />\r\n      </div>\r\n      <div>\r\n        number: <input onChange={props.handleChange2} />\r\n      </div>\r\n      <button type=\"submit\">add</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst Filter = (props) => {\r\n  return (\r\n    <div>\r\n      Filter shown with\r\n      <form>\r\n        filter: <input onChange={props.event} />\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst PersonsToShow = ({ persons, filter, handleClick }) => {\r\n  /* const personsToShow = persons.filter((person) => person.name.includes(filter)) */\r\n\r\n  return persons\r\n    .filter((person) => person.name.includes(filter))\r\n    .map((person) => (\r\n      <p key={person.name.toString()}>\r\n        {person.name} {person.number}\r\n        <button onClick={() => handleClick(person)}>delete</button>\r\n      </p>\r\n    ))\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}